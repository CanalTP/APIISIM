#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Aug 28 16:23:50 2014 by generateDS.py version 2.12d.
#
# Command line options:
#   ('-o', 'mis_collect_stops.py')
#
# Command line arguments:
#   MisCollectStops.xsd
#
# Command line:
#   /usr/local/bin/generateDS.py -o "mis_collect_stops.py" MisCollectStops.xsd
#
# Current working directory (os.getcwd()):
#   XSD-APII-SIM-V1.5
#

import sys
import getopt
import re as re_
import base64
import datetime as datetime_

etree_ = None
Verbose_import_ = False
(
    XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError(
                        "Failed to import ElementTree from any known place")


def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
            'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return input_data
        def gds_validate_datetime(self, input_data, node, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (
            msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class AbstractRequestType(GeneratedsSuper):
    """Structure générique des requêtes des services fournis sur les
    SIMIdentifiant de la structure de requête. Cet identifiant est
    fourni par le client du service. L'identifiant est rappelé dans
    la ou les réponses du service (sous forme d'élément
    RequestId)."""
    subclass = None
    superclass = None
    def __init__(self, id=None):
        self.original_tagname_ = None
        self.id = _cast(None, id)
    def factory(*args_, **kwargs_):
        if AbstractRequestType.subclass:
            return AbstractRequestType.subclass(*args_, **kwargs_)
        else:
            return AbstractRequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AbstractRequestType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AbstractRequestType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AbstractRequestType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AbstractRequestType'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='AbstractRequestType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='AbstractRequestType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            showIndent(outfile, level)
            outfile.write('id="%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AbstractRequestType


class AbstractResponseType(GeneratedsSuper):
    """Structure générique des réponses des services fournis sur les SIM"""
    subclass = None
    superclass = None
    def __init__(self, RequestId=None, ResponseDefaults=None, extensiontype_=None):
        self.original_tagname_ = None
        self.RequestId = RequestId
        self.ResponseDefaults = ResponseDefaults
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if AbstractResponseType.subclass:
            return AbstractResponseType.subclass(*args_, **kwargs_)
        else:
            return AbstractResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RequestId(self): return self.RequestId
    def set_RequestId(self, RequestId): self.RequestId = RequestId
    def get_ResponseDefaults(self): return self.ResponseDefaults
    def set_ResponseDefaults(self, ResponseDefaults): self.ResponseDefaults = ResponseDefaults
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            self.RequestId is not None or
            self.ResponseDefaults is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AbstractResponseType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AbstractResponseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AbstractResponseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AbstractResponseType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AbstractResponseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RequestId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestId>%s</%sRequestId>%s' % (namespace_, self.gds_format_string(quote_xml(self.RequestId).encode(ExternalEncoding), input_name='RequestId'), namespace_, eol_))
        if self.ResponseDefaults is not None:
            self.ResponseDefaults.export(outfile, level, namespace_, name_='ResponseDefaults', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='AbstractResponseType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.RequestId is not None:
            showIndent(outfile, level)
            outfile.write('RequestId=%s,\n' % quote_python(self.RequestId).encode(ExternalEncoding))
        if self.ResponseDefaults is not None:
            showIndent(outfile, level)
            outfile.write('ResponseDefaults=model_.ServiceDefaultsType(\n')
            self.ResponseDefaults.exportLiteral(outfile, level, name_='ResponseDefaults')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RequestId':
            RequestId_ = child_.text
            RequestId_ = self.gds_validate_string(RequestId_, node, 'RequestId')
            self.RequestId = RequestId_
        elif nodeName_ == 'ResponseDefaults':
            obj_ = ServiceDefaultsType.factory()
            obj_.build(child_)
            self.ResponseDefaults = obj_
            obj_.original_tagname_ = 'ResponseDefaults'
# end class AbstractResponseType


class ServiceDefaultsType(GeneratedsSuper):
    """Paramètres par défaut utilisés dans les structures de réponses
    des différents services"""
    subclass = None
    superclass = None
    def __init__(self, DefaultLocale=None, DefaultLocationSystem=None, DefaultSystemOfUnits='SiMetres', geographicOverviewFormats=None):
        self.original_tagname_ = None
        self.DefaultLocale = DefaultLocale
        self.DefaultLocationSystem = DefaultLocationSystem
        self.DefaultSystemOfUnits = DefaultSystemOfUnits
        self.geographicOverviewFormats = geographicOverviewFormats
    def factory(*args_, **kwargs_):
        if ServiceDefaultsType.subclass:
            return ServiceDefaultsType.subclass(*args_, **kwargs_)
        else:
            return ServiceDefaultsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DefaultLocale(self): return self.DefaultLocale
    def set_DefaultLocale(self, DefaultLocale): self.DefaultLocale = DefaultLocale
    def get_DefaultLocationSystem(self): return self.DefaultLocationSystem
    def set_DefaultLocationSystem(self, DefaultLocationSystem): self.DefaultLocationSystem = DefaultLocationSystem
    def get_DefaultSystemOfUnits(self): return self.DefaultSystemOfUnits
    def set_DefaultSystemOfUnits(self, DefaultSystemOfUnits): self.DefaultSystemOfUnits = DefaultSystemOfUnits
    def get_geographicOverviewFormats(self): return self.geographicOverviewFormats
    def set_geographicOverviewFormats(self, geographicOverviewFormats): self.geographicOverviewFormats = geographicOverviewFormats
    def validate_SystemOfUnits(self, value):
        # Validate type SystemOfUnits, a restriction on xs:normalizedString.
        pass
    def hasContent_(self):
        if (
            self.DefaultLocale is not None or
            self.DefaultLocationSystem is not None or
            self.DefaultSystemOfUnits is not None or
            self.geographicOverviewFormats is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceDefaultsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceDefaultsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceDefaultsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceDefaultsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceDefaultsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DefaultLocale is not None:
            self.DefaultLocale.export(outfile, level, namespace_, name_='DefaultLocale', pretty_print=pretty_print)
        if self.DefaultLocationSystem is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDefaultLocationSystem>%s</%sDefaultLocationSystem>%s' % (namespace_, self.gds_format_string(quote_xml(self.DefaultLocationSystem).encode(ExternalEncoding), input_name='DefaultLocationSystem'), namespace_, eol_))
        if self.DefaultSystemOfUnits is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDefaultSystemOfUnits>%s</%sDefaultSystemOfUnits>%s' % (namespace_, self.gds_format_string(quote_xml(self.DefaultSystemOfUnits).encode(ExternalEncoding), input_name='DefaultSystemOfUnits'), namespace_, eol_))
        if self.geographicOverviewFormats is not None:
            self.geographicOverviewFormats.export(outfile, level, namespace_, name_='geographicOverviewFormats', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ServiceDefaultsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.DefaultLocale is not None:
            showIndent(outfile, level)
            outfile.write('DefaultLocale=model_.DefaultLocaleType(\n')
            self.DefaultLocale.exportLiteral(outfile, level, name_='DefaultLocale')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DefaultLocationSystem is not None:
            showIndent(outfile, level)
            outfile.write('DefaultLocationSystem=%s,\n' % quote_python(self.DefaultLocationSystem).encode(ExternalEncoding))
        if self.DefaultSystemOfUnits is not None:
            showIndent(outfile, level)
            outfile.write('DefaultSystemOfUnits=%s,\n' % quote_python(self.DefaultSystemOfUnits).encode(ExternalEncoding))
        if self.geographicOverviewFormats is not None:
            showIndent(outfile, level)
            outfile.write('geographicOverviewFormats=model_.geographicOverviewFormatsType(\n')
            self.geographicOverviewFormats.exportLiteral(outfile, level, name_='geographicOverviewFormats')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DefaultLocale':
            obj_ = DefaultLocaleType.factory()
            obj_.build(child_)
            self.DefaultLocale = obj_
            obj_.original_tagname_ = 'DefaultLocale'
        elif nodeName_ == 'DefaultLocationSystem':
            DefaultLocationSystem_ = child_.text
            DefaultLocationSystem_ = self.gds_validate_string(DefaultLocationSystem_, node, 'DefaultLocationSystem')
            self.DefaultLocationSystem = DefaultLocationSystem_
        elif nodeName_ == 'DefaultSystemOfUnits':
            DefaultSystemOfUnits_ = child_.text
            DefaultSystemOfUnits_ = self.gds_validate_string(DefaultSystemOfUnits_, node, 'DefaultSystemOfUnits')
            self.DefaultSystemOfUnits = DefaultSystemOfUnits_
            self.validate_SystemOfUnits(self.DefaultSystemOfUnits)    # validate type SystemOfUnits
        elif nodeName_ == 'geographicOverviewFormats':
            obj_ = geographicOverviewFormatsType.factory()
            obj_.build(child_)
            self.geographicOverviewFormats = obj_
            obj_.original_tagname_ = 'geographicOverviewFormats'
# end class ServiceDefaultsType


class StopPlaceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, quay=None, ParentZoneRef=None, placeTypes=None):
        self.original_tagname_ = None
        self.quay = quay
        self.ParentZoneRef = ParentZoneRef
        self.placeTypes = placeTypes
    def factory(*args_, **kwargs_):
        if StopPlaceType.subclass:
            return StopPlaceType.subclass(*args_, **kwargs_)
        else:
            return StopPlaceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_quay(self): return self.quay
    def set_quay(self, quay): self.quay = quay
    def get_ParentZoneRef(self): return self.ParentZoneRef
    def set_ParentZoneRef(self, ParentZoneRef): self.ParentZoneRef = ParentZoneRef
    def get_placeTypes(self): return self.placeTypes
    def set_placeTypes(self, placeTypes): self.placeTypes = placeTypes
    def hasContent_(self):
        if (
            self.quay is not None or
            self.ParentZoneRef is not None or
            self.placeTypes is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='StopPlaceType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='StopPlaceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='StopPlaceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='StopPlaceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='StopPlaceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.quay is not None:
            self.quay.export(outfile, level, namespace_, name_='quay', pretty_print=pretty_print)
        if self.ParentZoneRef is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sParentZoneRef>%s</%sParentZoneRef>%s' % (namespace_, self.gds_format_string(quote_xml(self.ParentZoneRef).encode(ExternalEncoding), input_name='ParentZoneRef'), namespace_, eol_))
        if self.placeTypes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%splaceTypes>%s</%splaceTypes>%s' % (namespace_, self.gds_format_string(quote_xml(self.placeTypes).encode(ExternalEncoding), input_name='placeTypes'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='StopPlaceType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.quay is not None:
            showIndent(outfile, level)
            outfile.write('quay=model_.QuayType(\n')
            self.quay.exportLiteral(outfile, level, name_='quay')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ParentZoneRef is not None:
            showIndent(outfile, level)
            outfile.write('ParentZoneRef=%s,\n' % quote_python(self.ParentZoneRef).encode(ExternalEncoding))
        if self.placeTypes is not None:
            showIndent(outfile, level)
            outfile.write('placeTypes=%s,\n' % quote_python(self.placeTypes).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'quay':
            obj_ = QuayType.factory()
            obj_.build(child_)
            self.quay = obj_
            obj_.original_tagname_ = 'quay'
        elif nodeName_ == 'ParentZoneRef':
            ParentZoneRef_ = child_.text
            ParentZoneRef_ = self.gds_validate_string(ParentZoneRef_, node, 'ParentZoneRef')
            self.ParentZoneRef = ParentZoneRef_
        elif nodeName_ == 'placeTypes':
            placeTypes_ = child_.text
            placeTypes_ = self.gds_validate_string(placeTypes_, node, 'placeTypes')
            self.placeTypes = placeTypes_
# end class StopPlaceType


class QuayType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Description=None, PrivateCode=None, Centroid=None, PostalAddress=None, TransportMode=None, QuayType=None):
        self.original_tagname_ = None
        self.Name = Name
        self.Description = Description
        self.PrivateCode = PrivateCode
        self.Centroid = Centroid
        self.PostalAddress = PostalAddress
        self.TransportMode = TransportMode
        self.QuayType = QuayType
    def factory(*args_, **kwargs_):
        if QuayType.subclass:
            return QuayType.subclass(*args_, **kwargs_)
        else:
            return QuayType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_PrivateCode(self): return self.PrivateCode
    def set_PrivateCode(self, PrivateCode): self.PrivateCode = PrivateCode
    def get_Centroid(self): return self.Centroid
    def set_Centroid(self, Centroid): self.Centroid = Centroid
    def get_PostalAddress(self): return self.PostalAddress
    def set_PostalAddress(self, PostalAddress): self.PostalAddress = PostalAddress
    def get_TransportMode(self): return self.TransportMode
    def set_TransportMode(self, TransportMode): self.TransportMode = TransportMode
    def get_QuayType(self): return self.QuayType
    def set_QuayType(self, QuayType): self.QuayType = QuayType
    def validate_VehicleModeEnumeration(self, value):
        # Validate type VehicleModeEnumeration, a restriction on xs:NMTOKEN.
        pass
    def validate_QuayTypeEnumeration(self, value):
        # Validate type QuayTypeEnumeration, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Description is not None or
            self.PrivateCode is not None or
            self.Centroid is not None or
            self.PostalAddress is not None or
            self.TransportMode is not None or
            self.QuayType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='QuayType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='QuayType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='QuayType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='QuayType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='QuayType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_, eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespace_, self.gds_format_string(quote_xml(self.Description).encode(ExternalEncoding), input_name='Description'), namespace_, eol_))
        if self.PrivateCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrivateCode>%s</%sPrivateCode>%s' % (namespace_, self.gds_format_string(quote_xml(self.PrivateCode).encode(ExternalEncoding), input_name='PrivateCode'), namespace_, eol_))
        if self.Centroid is not None:
            self.Centroid.export(outfile, level, namespace_, name_='Centroid', pretty_print=pretty_print)
        if self.PostalAddress is not None:
            self.PostalAddress.export(outfile, level, namespace_, name_='PostalAddress', pretty_print=pretty_print)
        if self.TransportMode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportMode>%s</%sTransportMode>%s' % (namespace_, self.gds_format_string(quote_xml(self.TransportMode).encode(ExternalEncoding), input_name='TransportMode'), namespace_, eol_))
        if self.QuayType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuayType>%s</%sQuayType>%s' % (namespace_, self.gds_format_string(quote_xml(self.QuayType).encode(ExternalEncoding), input_name='QuayType'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='QuayType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.Description is not None:
            showIndent(outfile, level)
            outfile.write('Description=%s,\n' % quote_python(self.Description).encode(ExternalEncoding))
        if self.PrivateCode is not None:
            showIndent(outfile, level)
            outfile.write('PrivateCode=%s,\n' % quote_python(self.PrivateCode).encode(ExternalEncoding))
        if self.Centroid is not None:
            showIndent(outfile, level)
            outfile.write('Centroid=model_.CentroidType(\n')
            self.Centroid.exportLiteral(outfile, level, name_='Centroid')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PostalAddress is not None:
            showIndent(outfile, level)
            outfile.write('PostalAddress=model_.PostalAddressType(\n')
            self.PostalAddress.exportLiteral(outfile, level, name_='PostalAddress')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TransportMode is not None:
            showIndent(outfile, level)
            outfile.write('TransportMode=%s,\n' % quote_python(self.TransportMode).encode(ExternalEncoding))
        if self.QuayType is not None:
            showIndent(outfile, level)
            outfile.write('QuayType=%s,\n' % quote_python(self.QuayType).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'PrivateCode':
            PrivateCode_ = child_.text
            PrivateCode_ = self.gds_validate_string(PrivateCode_, node, 'PrivateCode')
            self.PrivateCode = PrivateCode_
        elif nodeName_ == 'Centroid':
            obj_ = CentroidType.factory()
            obj_.build(child_)
            self.Centroid = obj_
            obj_.original_tagname_ = 'Centroid'
        elif nodeName_ == 'PostalAddress':
            obj_ = PostalAddressType.factory()
            obj_.build(child_)
            self.PostalAddress = obj_
            obj_.original_tagname_ = 'PostalAddress'
        elif nodeName_ == 'TransportMode':
            TransportMode_ = child_.text
            TransportMode_ = self.gds_validate_string(TransportMode_, node, 'TransportMode')
            self.TransportMode = TransportMode_
            self.validate_VehicleModeEnumeration(self.TransportMode)    # validate type VehicleModeEnumeration
        elif nodeName_ == 'QuayType':
            QuayType_ = child_.text
            QuayType_ = self.gds_validate_string(QuayType_, node, 'QuayType')
            self.QuayType = QuayType_
            self.validate_QuayTypeEnumeration(self.QuayType)    # validate type QuayTypeEnumeration
# end class QuayType


class LocationStructure(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Longitude=None, Latitude=None, pos=None):
        self.original_tagname_ = None
        self.Longitude = Longitude
        self.Latitude = Latitude
        self.pos = pos
    def factory(*args_, **kwargs_):
        if LocationStructure.subclass:
            return LocationStructure.subclass(*args_, **kwargs_)
        else:
            return LocationStructure(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Longitude(self): return self.Longitude
    def set_Longitude(self, Longitude): self.Longitude = Longitude
    def get_Latitude(self): return self.Latitude
    def set_Latitude(self, Latitude): self.Latitude = Latitude
    def get_pos(self): return self.pos
    def set_pos(self, pos): self.pos = pos
    def hasContent_(self):
        if (
            self.Longitude is not None or
            self.Latitude is not None or
            self.pos is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='LocationStructure', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LocationStructure')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='LocationStructure', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LocationStructure'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='LocationStructure', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Longitude is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLongitude>%s</%sLongitude>%s' % (namespace_, self.gds_format_string(quote_xml(self.Longitude).encode(ExternalEncoding), input_name='Longitude'), namespace_, eol_))
        if self.Latitude is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLatitude>%s</%sLatitude>%s' % (namespace_, self.gds_format_string(quote_xml(self.Latitude).encode(ExternalEncoding), input_name='Latitude'), namespace_, eol_))
        if self.pos is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spos>%s</%spos>%s' % (namespace_, self.gds_format_string(quote_xml(self.pos).encode(ExternalEncoding), input_name='pos'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='LocationStructure'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Longitude is not None:
            showIndent(outfile, level)
            outfile.write('Longitude=%s,\n' % quote_python(self.Longitude).encode(ExternalEncoding))
        if self.Latitude is not None:
            showIndent(outfile, level)
            outfile.write('Latitude=%s,\n' % quote_python(self.Latitude).encode(ExternalEncoding))
        if self.pos is not None:
            showIndent(outfile, level)
            outfile.write('pos=%s,\n' % quote_python(self.pos).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Longitude':
            Longitude_ = child_.text
            Longitude_ = self.gds_validate_string(Longitude_, node, 'Longitude')
            self.Longitude = Longitude_
        elif nodeName_ == 'Latitude':
            Latitude_ = child_.text
            Latitude_ = self.gds_validate_string(Latitude_, node, 'Latitude')
            self.Latitude = Latitude_
        elif nodeName_ == 'pos':
            pos_ = child_.text
            pos_ = self.gds_validate_string(pos_, node, 'pos')
            self.pos = pos_
# end class LocationStructure


class Longitude(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if Longitude.subclass:
            return Longitude.subclass(*args_, **kwargs_)
        else:
            return Longitude(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Longitude', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Longitude')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Longitude', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Longitude'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Longitude', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='Longitude'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Longitude


class Latitude(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if Latitude.subclass:
            return Latitude.subclass(*args_, **kwargs_)
        else:
            return Latitude(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Latitude', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Latitude')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Latitude', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Latitude'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Latitude', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='Latitude'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Latitude


class StatusType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Comment=None, RuntimeDuration=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Comment = Comment
        self.RuntimeDuration = RuntimeDuration
    def factory(*args_, **kwargs_):
        if StatusType.subclass:
            return StatusType.subclass(*args_, **kwargs_)
        else:
            return StatusType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Comment(self): return self.Comment
    def set_Comment(self, Comment): self.Comment = Comment
    def get_RuntimeDuration(self): return self.RuntimeDuration
    def set_RuntimeDuration(self, RuntimeDuration): self.RuntimeDuration = RuntimeDuration
    def validate_StopsStatusCodeEnumeration(self, value):
        # Validate type StopsStatusCodeEnumeration, a restriction on protocol:StatusCodeEnumeration.
        pass
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Comment is not None or
            self.RuntimeDuration is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='StatusType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='StatusType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='StatusType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='StatusType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='StatusType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespace_, self.gds_format_string(quote_xml(self.Code).encode(ExternalEncoding), input_name='Code'), namespace_, eol_))
        if self.Comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComment>%s</%sComment>%s' % (namespace_, self.gds_format_string(quote_xml(self.Comment).encode(ExternalEncoding), input_name='Comment'), namespace_, eol_))
        if self.RuntimeDuration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRuntimeDuration>%s</%sRuntimeDuration>%s' % (namespace_, self.gds_format_string(quote_xml(self.RuntimeDuration).encode(ExternalEncoding), input_name='RuntimeDuration'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='StatusType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('Code=%s,\n' % quote_python(self.Code).encode(ExternalEncoding))
        if self.Comment is not None:
            showIndent(outfile, level)
            outfile.write('Comment=%s,\n' % quote_python(self.Comment).encode(ExternalEncoding))
        if self.RuntimeDuration is not None:
            showIndent(outfile, level)
            outfile.write('RuntimeDuration=%s,\n' % quote_python(self.RuntimeDuration).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
            self.validate_StopsStatusCodeEnumeration(self.Code)    # validate type StopsStatusCodeEnumeration
        elif nodeName_ == 'Comment':
            Comment_ = child_.text
            Comment_ = self.gds_validate_string(Comment_, node, 'Comment')
            self.Comment = Comment_
        elif nodeName_ == 'RuntimeDuration':
            RuntimeDuration_ = child_.text
            RuntimeDuration_ = self.gds_validate_string(RuntimeDuration_, node, 'RuntimeDuration')
            self.RuntimeDuration = RuntimeDuration_
# end class StatusType


class DefaultLocaleType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DefaultLanguage=None, TimeZoneOffset=None):
        self.original_tagname_ = None
        self.DefaultLanguage = DefaultLanguage
        self.TimeZoneOffset = TimeZoneOffset
    def factory(*args_, **kwargs_):
        if DefaultLocaleType.subclass:
            return DefaultLocaleType.subclass(*args_, **kwargs_)
        else:
            return DefaultLocaleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DefaultLanguage(self): return self.DefaultLanguage
    def set_DefaultLanguage(self, DefaultLanguage): self.DefaultLanguage = DefaultLanguage
    def get_TimeZoneOffset(self): return self.TimeZoneOffset
    def set_TimeZoneOffset(self, TimeZoneOffset): self.TimeZoneOffset = TimeZoneOffset
    def hasContent_(self):
        if (
            self.DefaultLanguage is not None or
            self.TimeZoneOffset is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DefaultLocaleType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DefaultLocaleType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DefaultLocaleType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DefaultLocaleType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DefaultLocaleType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DefaultLanguage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDefaultLanguage>%s</%sDefaultLanguage>%s' % (namespace_, self.gds_format_string(quote_xml(self.DefaultLanguage).encode(ExternalEncoding), input_name='DefaultLanguage'), namespace_, eol_))
        if self.TimeZoneOffset is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeZoneOffset>%s</%sTimeZoneOffset>%s' % (namespace_, self.gds_format_float(self.TimeZoneOffset, input_name='TimeZoneOffset'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='DefaultLocaleType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.DefaultLanguage is not None:
            showIndent(outfile, level)
            outfile.write('DefaultLanguage=%s,\n' % quote_python(self.DefaultLanguage).encode(ExternalEncoding))
        if self.TimeZoneOffset is not None:
            showIndent(outfile, level)
            outfile.write('TimeZoneOffset=%f,\n' % self.TimeZoneOffset)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DefaultLanguage':
            DefaultLanguage_ = child_.text
            DefaultLanguage_ = self.gds_validate_string(DefaultLanguage_, node, 'DefaultLanguage')
            self.DefaultLanguage = DefaultLanguage_
        elif nodeName_ == 'TimeZoneOffset':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TimeZoneOffset')
            self.TimeZoneOffset = fval_
# end class DefaultLocaleType


class geographicOverviewFormatsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, GeographicOverviewFormat=None):
        self.original_tagname_ = None
        if GeographicOverviewFormat is None:
            self.GeographicOverviewFormat = []
        else:
            self.GeographicOverviewFormat = GeographicOverviewFormat
    def factory(*args_, **kwargs_):
        if geographicOverviewFormatsType.subclass:
            return geographicOverviewFormatsType.subclass(*args_, **kwargs_)
        else:
            return geographicOverviewFormatsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_GeographicOverviewFormat(self): return self.GeographicOverviewFormat
    def set_GeographicOverviewFormat(self, GeographicOverviewFormat): self.GeographicOverviewFormat = GeographicOverviewFormat
    def add_GeographicOverviewFormat(self, value): self.GeographicOverviewFormat.append(value)
    def insert_GeographicOverviewFormat(self, index, value): self.GeographicOverviewFormat[index] = value
    def hasContent_(self):
        if (
            self.GeographicOverviewFormat
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='geographicOverviewFormatsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='geographicOverviewFormatsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='geographicOverviewFormatsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='geographicOverviewFormatsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='geographicOverviewFormatsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for GeographicOverviewFormat_ in self.GeographicOverviewFormat:
            GeographicOverviewFormat_.export(outfile, level, namespace_, name_='GeographicOverviewFormat', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='geographicOverviewFormatsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('GeographicOverviewFormat=[\n')
        level += 1
        for GeographicOverviewFormat_ in self.GeographicOverviewFormat:
            showIndent(outfile, level)
            outfile.write('model_.GeographicOverviewFormatType(\n')
            GeographicOverviewFormat_.exportLiteral(outfile, level, name_='GeographicOverviewFormatType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'GeographicOverviewFormat':
            obj_ = GeographicOverviewFormatType.factory()
            obj_.build(child_)
            self.GeographicOverviewFormat.append(obj_)
            obj_.original_tagname_ = 'GeographicOverviewFormat'
# end class geographicOverviewFormatsType


class GeographicOverviewFormatType(GeneratedsSuper):
    """Indique s'il s'agit du format par défaut dans l'ensemble de la
    réponse du service"""
    subclass = None
    superclass = None
    def __init__(self, default=None, GeographicResourceFormatRef=None, GeographicResourceFormat=None):
        self.original_tagname_ = None
        self.default = _cast(bool, default)
        self.GeographicResourceFormatRef = GeographicResourceFormatRef
        self.GeographicResourceFormat = GeographicResourceFormat
    def factory(*args_, **kwargs_):
        if GeographicOverviewFormatType.subclass:
            return GeographicOverviewFormatType.subclass(*args_, **kwargs_)
        else:
            return GeographicOverviewFormatType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_GeographicResourceFormatRef(self): return self.GeographicResourceFormatRef
    def set_GeographicResourceFormatRef(self, GeographicResourceFormatRef): self.GeographicResourceFormatRef = GeographicResourceFormatRef
    def get_GeographicResourceFormat(self): return self.GeographicResourceFormat
    def set_GeographicResourceFormat(self, GeographicResourceFormat): self.GeographicResourceFormat = GeographicResourceFormat
    def get_default(self): return self.default
    def set_default(self, default): self.default = default
    def hasContent_(self):
        if (
            self.GeographicResourceFormatRef is not None or
            self.GeographicResourceFormat is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='GeographicOverviewFormatType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GeographicOverviewFormatType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='GeographicOverviewFormatType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='GeographicOverviewFormatType'):
        if self.default is not None and 'default' not in already_processed:
            already_processed.add('default')
            outfile.write(' default="%s"' % self.gds_format_boolean(self.default, input_name='default'))
    def exportChildren(self, outfile, level, namespace_='', name_='GeographicOverviewFormatType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GeographicResourceFormatRef is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGeographicResourceFormatRef>%s</%sGeographicResourceFormatRef>%s' % (namespace_, self.gds_format_integer(self.GeographicResourceFormatRef, input_name='GeographicResourceFormatRef'), namespace_, eol_))
        if self.GeographicResourceFormat is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGeographicResourceFormat>%s</%sGeographicResourceFormat>%s' % (namespace_, self.gds_format_string(quote_xml(self.GeographicResourceFormat).encode(ExternalEncoding), input_name='GeographicResourceFormat'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='GeographicOverviewFormatType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.default is not None and 'default' not in already_processed:
            already_processed.add('default')
            showIndent(outfile, level)
            outfile.write('default=%s,\n' % (self.default,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.GeographicResourceFormatRef is not None:
            showIndent(outfile, level)
            outfile.write('GeographicResourceFormatRef=%d,\n' % self.GeographicResourceFormatRef)
        if self.GeographicResourceFormat is not None:
            showIndent(outfile, level)
            outfile.write('GeographicResourceFormat=%s,\n' % quote_python(self.GeographicResourceFormat).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('default', node)
        if value is not None and 'default' not in already_processed:
            already_processed.add('default')
            if value in ('true', '1'):
                self.default = True
            elif value in ('false', '0'):
                self.default = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'GeographicResourceFormatRef':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'GeographicResourceFormatRef')
            self.GeographicResourceFormatRef = ival_
        elif nodeName_ == 'GeographicResourceFormat':
            GeographicResourceFormat_ = child_.text
            GeographicResourceFormat_ = self.gds_validate_string(GeographicResourceFormat_, node, 'GeographicResourceFormat')
            self.GeographicResourceFormat = GeographicResourceFormat_
# end class GeographicOverviewFormatType


class CentroidType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Location=None):
        self.original_tagname_ = None
        self.Location = Location
    def factory(*args_, **kwargs_):
        if CentroidType.subclass:
            return CentroidType.subclass(*args_, **kwargs_)
        else:
            return CentroidType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Location(self): return self.Location
    def set_Location(self, Location): self.Location = Location
    def hasContent_(self):
        if (
            self.Location is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CentroidType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CentroidType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CentroidType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CentroidType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CentroidType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Location is not None:
            self.Location.export(outfile, level, namespace_, name_='Location', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='CentroidType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Location is not None:
            showIndent(outfile, level)
            outfile.write('Location=model_.LocationStructure(\n')
            self.Location.exportLiteral(outfile, level, name_='Location')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Location':
            obj_ = LocationStructure.factory()
            obj_.build(child_)
            self.Location = obj_
            obj_.original_tagname_ = 'Location'
# end class CentroidType


class PostalAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, version=None, id=None, created=None, CountryRef=None, AddressLine1=None, PostCode=None):
        self.original_tagname_ = None
        self.version = _cast(None, version)
        self.id = _cast(None, id)
        if isinstance(created, basestring):
            initvalue_ = datetime_.datetime.strptime(created, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = created
        self.created = initvalue_
        self.CountryRef = CountryRef
        self.AddressLine1 = AddressLine1
        self.PostCode = PostCode
    def factory(*args_, **kwargs_):
        if PostalAddressType.subclass:
            return PostalAddressType.subclass(*args_, **kwargs_)
        else:
            return PostalAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CountryRef(self): return self.CountryRef
    def set_CountryRef(self, CountryRef): self.CountryRef = CountryRef
    def get_AddressLine1(self): return self.AddressLine1
    def set_AddressLine1(self, AddressLine1): self.AddressLine1 = AddressLine1
    def get_PostCode(self): return self.PostCode
    def set_PostCode(self, PostCode): self.PostCode = PostCode
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_created(self): return self.created
    def set_created(self, created): self.created = created
    def hasContent_(self):
        if (
            self.CountryRef is not None or
            self.AddressLine1 is not None or
            self.PostCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PostalAddressType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PostalAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PostalAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PostalAddressType'):
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version=%s' % (self.gds_format_string(quote_attrib(self.version).encode(ExternalEncoding), input_name='version'), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
        if self.created is not None and 'created' not in already_processed:
            already_processed.add('created')
            outfile.write(' created="%s"' % self.gds_format_datetime(self.created, input_name='created'))
    def exportChildren(self, outfile, level, namespace_='', name_='PostalAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountryRef is not None:
            self.CountryRef.export(outfile, level, namespace_, name_='CountryRef', pretty_print=pretty_print)
        if self.AddressLine1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressLine1>%s</%sAddressLine1>%s' % (namespace_, self.gds_format_string(quote_xml(self.AddressLine1).encode(ExternalEncoding), input_name='AddressLine1'), namespace_, eol_))
        if self.PostCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostCode>%s</%sPostCode>%s' % (namespace_, self.gds_format_string(quote_xml(self.PostCode).encode(ExternalEncoding), input_name='PostCode'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='PostalAddressType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            showIndent(outfile, level)
            outfile.write('version="%s",\n' % (self.version,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            showIndent(outfile, level)
            outfile.write('id="%s",\n' % (self.id,))
        if self.created is not None and 'created' not in already_processed:
            already_processed.add('created')
            showIndent(outfile, level)
            outfile.write('created=model_.GeneratedsSuper.gds_parse_datetime("%s"),\n' % self.gds_format_datetime(self.created, input_name='created'))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CountryRef is not None:
            showIndent(outfile, level)
            outfile.write('CountryRef=model_.CountryRefType(\n')
            self.CountryRef.exportLiteral(outfile, level, name_='CountryRef')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.AddressLine1 is not None:
            showIndent(outfile, level)
            outfile.write('AddressLine1=%s,\n' % quote_python(self.AddressLine1).encode(ExternalEncoding))
        if self.PostCode is not None:
            showIndent(outfile, level)
            outfile.write('PostCode=%s,\n' % quote_python(self.PostCode).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            self.version = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
        value = find_attr_value_('created', node)
        if value is not None and 'created' not in already_processed:
            already_processed.add('created')
            try:
                self.created = self.gds_parse_datetime(value)
            except ValueError, exp:
                raise ValueError('Bad date-time attribute (created): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CountryRef':
            obj_ = CountryRefType.factory()
            obj_.build(child_)
            self.CountryRef = obj_
            obj_.original_tagname_ = 'CountryRef'
        elif nodeName_ == 'AddressLine1':
            AddressLine1_ = child_.text
            AddressLine1_ = self.gds_validate_string(AddressLine1_, node, 'AddressLine1')
            self.AddressLine1 = AddressLine1_
        elif nodeName_ == 'PostCode':
            PostCode_ = child_.text
            PostCode_ = self.gds_validate_string(PostCode_, node, 'PostCode')
            self.PostCode = PostCode_
# end class PostalAddressType


class CountryRefType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ref=None):
        self.original_tagname_ = None
        self.ref = _cast(None, ref)
    def factory(*args_, **kwargs_):
        if CountryRefType.subclass:
            return CountryRefType.subclass(*args_, **kwargs_)
        else:
            return CountryRefType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ref(self): return self.ref
    def set_ref(self, ref): self.ref = ref
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CountryRefType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CountryRefType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CountryRefType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CountryRefType'):
        if self.ref is not None and 'ref' not in already_processed:
            already_processed.add('ref')
            outfile.write(' ref=%s' % (self.gds_format_string(quote_attrib(self.ref).encode(ExternalEncoding), input_name='ref'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CountryRefType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='CountryRefType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.ref is not None and 'ref' not in already_processed:
            already_processed.add('ref')
            showIndent(outfile, level)
            outfile.write('ref="%s",\n' % (self.ref,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ref', node)
        if value is not None and 'ref' not in already_processed:
            already_processed.add('ref')
            self.ref = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CountryRefType


class StopsResponseType(AbstractResponseType):
    """Structure de requête du service de collecte des arrêts d'un SIM"""
    subclass = None
    superclass = AbstractResponseType
    def __init__(self, RequestId=None, ResponseDefaults=None, Status=None, stopPlaces=None):
        self.original_tagname_ = None
        super(StopsResponseType, self).__init__(RequestId, ResponseDefaults, )
        self.Status = Status
        if stopPlaces is None:
            self.stopPlaces = []
        else:
            self.stopPlaces = stopPlaces
    def factory(*args_, **kwargs_):
        if StopsResponseType.subclass:
            return StopsResponseType.subclass(*args_, **kwargs_)
        else:
            return StopsResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Status(self): return self.Status
    def set_Status(self, Status): self.Status = Status
    def get_stopPlaces(self): return self.stopPlaces
    def set_stopPlaces(self, stopPlaces): self.stopPlaces = stopPlaces
    def add_stopPlaces(self, value): self.stopPlaces.append(value)
    def insert_stopPlaces(self, index, value): self.stopPlaces[index] = value
    def hasContent_(self):
        if (
            self.Status is not None or
            self.stopPlaces or
            super(StopsResponseType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='StopsResponseType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='StopsResponseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='StopsResponseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='StopsResponseType'):
        super(StopsResponseType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='StopsResponseType')
    def exportChildren(self, outfile, level, namespace_='', name_='StopsResponseType', fromsubclass_=False, pretty_print=True):
        super(StopsResponseType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Status is not None:
            self.Status.export(outfile, level, namespace_, name_='Status', pretty_print=pretty_print)
        for stopPlaces_ in self.stopPlaces:
            stopPlaces_.export(outfile, level, namespace_, name_='stopPlaces', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='StopsResponseType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(StopsResponseType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(StopsResponseType, self).exportLiteralChildren(outfile, level, name_)
        if self.Status is not None:
            showIndent(outfile, level)
            outfile.write('Status=model_.StatusType(\n')
            self.Status.exportLiteral(outfile, level, name_='Status')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('stopPlaces=[\n')
        level += 1
        for stopPlaces_ in self.stopPlaces:
            showIndent(outfile, level)
            outfile.write('model_.StopPlaceType(\n')
            stopPlaces_.exportLiteral(outfile, level, name_='StopPlaceType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(StopsResponseType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Status':
            obj_ = StatusType.factory()
            obj_.build(child_)
            self.Status = obj_
            obj_.original_tagname_ = 'Status'
        elif nodeName_ == 'stopPlaces':
            obj_ = StopPlaceType.factory()
            obj_.build(child_)
            self.stopPlaces.append(obj_)
            obj_.original_tagname_ = 'stopPlaces'
        super(StopsResponseType, self).buildChildren(child_, node, nodeName_, True)
# end class StopsResponseType


GDSClassesMapping = {
    'Status': StatusType,
    'StopsResponse': StopsResponseType,
    'quay': QuayType,
    'CountryRef': CountryRefType,
    'ResponseDefaults': ServiceDefaultsType,
    'GeographicOverviewFormat': GeographicOverviewFormatType,
    'StopsRequest': AbstractRequestType,
    'stopPlaces': StopPlaceType,
    'Centroid': CentroidType,
    'geographicOverviewFormats': geographicOverviewFormatsType,
    'DefaultLocale': DefaultLocaleType,
    'PostalAddress': PostalAddressType,
    'Location': LocationStructure,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AbstractRequestType'
        rootClass = AbstractRequestType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AbstractRequestType'
        rootClass = AbstractRequestType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AbstractRequestType'
        rootClass = AbstractRequestType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AbstractRequestType'
        rootClass = AbstractRequestType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from mis_collect_stops import *\n\n')
        sys.stdout.write('import mis_collect_stops as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AbstractRequestType",
    "AbstractResponseType",
    "CentroidType",
    "CountryRefType",
    "DefaultLocaleType",
    "GeographicOverviewFormatType",
    "Latitude",
    "LocationStructure",
    "Longitude",
    "PostalAddressType",
    "QuayType",
    "ServiceDefaultsType",
    "StatusType",
    "StopPlaceType",
    "StopsResponseType",
    "geographicOverviewFormatsType"
]
